import React, { useMemo, useState } from "react";
import StatGraphModal from "./StatGraphModal";
import { PlusIcon, TrashIcon, ChevronRightIcon } from "./icons";

// Card for stat values
const StatCard = ({ label, value, onClick, clickable }) => (
  <div
    className={`bg-gray-100 dark:bg-gray-700 flex flex-col rounded-lg p-2 items-center min-w-[70px] transition cursor-pointer ${
      clickable ? "hover:shadow-lg hover:bg-orange-50 dark:hover:bg-orange-900" : ""
    }`}
    onClick={clickable ? onClick : undefined}
  >
    <span className="text-xs text-orange-500 mb-1">{label}</span>
    <span className="text-2xl font-bold text-black dark:text-white">{value}</span>
  </div>
);

// Group games by *age* (year as of Sahil's birthday, 11/01/2016)
function groupGamesByAge(games) {
  const BIRTH = new Date("2016-11-01");
  const byAge = {};
  games.forEach((g) => {
    if (!g.timestamp) return;
    const gameDate = new Date(g.timestamp);
    let age = gameDate.getFullYear() - BIRTH.getFullYear();
    const isBeforeBirthday = (gameDate.getMonth() < 10) || (gameDate.getMonth() === 10 && gameDate.getDate() < 1);
    if (isBeforeBirthday) age -= 1;
    if (age < 8) return; // Only show 8+ per user request
    if (!byAge[age]) byAge[age] = { value: 0, date: `Age ${age}`, team: g.teamName, opponent: g.opponent };
    byAge[age].value += 1;
  });
  return Object.entries(byAge)
    .map(([k, v]) => ({ ...v, date: v.date }))
    .sort((a, b) => Number(a.date.split(" ")[1]) - Number(b.date.split(" ")[1]));
}

export default function Dashboard({
  teams,
  stats,
  onAddTeam,
  onDeleteGame,
  onDeleteTeam,
}) {
  const [newTeamName, setNewTeamName] = useState("");
  const [graphData, setGraphData] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [dateFilter, setDateFilter] = useState("");
  const [expandedGameIds, setExpandedGameIds] = useState([]);
  const [isHistoryVisible, setIsHistoryVisible] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [deletingGameId, setDeletingGameId] = useState(null);
  const [deletingTeamId, setDeletingTeamId] = useState(null);
  const GAMES_PER_PAGE = 4;

  // Aggregate stats
  const aggregatedStats = stats.reduce((acc, game) => {
    acc.points = (acc.points || 0) + (parseInt(game.points, 10) || 0);
    acc.fg2m = (acc.fg2m || 0) + (parseInt(game.fg2m, 10) || 0);
    acc.fg2a = (acc.fg2a || 0) + (parseInt(game.fg2a, 10) || 0);
    acc.fg3m = (acc.fg3m || 0) + (parseInt(game.fg3m, 10) || 0);
    acc.fg3a = (acc.fg3a || 0) + (parseInt(game.fg3a, 10) || 0);
    acc.ftm = (acc.ftm || 0) + (parseInt(game.ftm, 10) || 0);
    acc.fta = (acc.fta || 0) + (parseInt(game.fta, 10) || 0);
    acc.rebounds = (acc.rebounds || 0) + (parseInt(game.rebounds, 10) || 0);
    acc.assists = (acc.assists || 0) + (parseInt(game.assists, 10) || 0);
    acc.steals = (acc.steals || 0) + (parseInt(game.steals, 10) || 0);
    acc.blocks = (acc.blocks || 0) + (parseInt(game.blocks, 10) || 0);
    acc.fouls = (acc.fouls || 0) + (parseInt(game.fouls, 10) || 0);
    acc.turnovers = (acc.turnovers || 0) + (parseInt(game.turnovers, 10) || 0);
    acc.gamesPlayed = (acc.gamesPlayed || 0) + 1;
    return acc;
  }, {});

  const totalFgMade = (aggregatedStats.fg2m || 0) + (aggregatedStats.fg3m || 0);
  const totalFgAtt = (aggregatedStats.fg2a || 0) + (aggregatedStats.fg3a || 0);

  const formatPercent = (made, attempted) => {
    if (!attempted || attempted === 0) return "0%";
    return `${Math.round((made / attempted) * 100)}%`;
  };

  const formatRatio = (val1, val2) => {
    if (!val2 || val2 === 0) return val1 > 0 ? `${val1.toFixed(1)}` : "0.0";
    return (val1 / val2).toFixed(2);
  };

  // Filters and pagination
  const sortedAndFilteredStats = useMemo(() => {
    let sortableItems = [...stats];
    if (searchTerm) {
      sortableItems = sortableItems.filter((game) =>
        (game.opponent || "").toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    if (dateFilter) {
      sortableItems = sortableItems.filter((game) => game.date === dateFilter);
    }
    sortableItems.sort((a, b) => {
      if (a.timestamp < b.timestamp) return 1;
      if (a.timestamp > b.timestamp) return -1;
      return 0;
    });
    return sortableItems;
  }, [stats, searchTerm, dateFilter]);

  const paginatedStats = useMemo(() => {
    const startIndex = (currentPage - 1) * GAMES_PER_PAGE;
    return sortedAndFilteredStats.slice(startIndex, startIndex + GAMES_PER_PAGE);
  }, [sortedAndFilteredStats, currentPage]);
  const totalPages = Math.ceil(sortedAndFilteredStats.length / GAMES_PER_PAGE);

  // Stat graph handler
  const handleStatClick = (statKey, statName) => {
    if (statKey === "gamesPlayed") {
      setGraphData({
        statKey,
        statName: "Games Played per Age",
        data: groupGamesByAge(stats),
      });
    } else {
      const data = [...stats]
        .sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0))
        .map((game) => ({
          value:
            statKey === "assistTurnoverRatio"
              ? game.turnovers
                ? (game.assists / game.turnovers).toFixed(2)
                : "0.00"
              : game[statKey] || 0,
          date: new Date(game.date).toLocaleDateString("en-US", { month: "2-digit", day: "2-digit" }),
          team: game.teamName,
          opponent: game.opponent,
        }));
      setGraphData({ statKey, statName, data });
    }
  };

  // Deleting logic
  const handleDeleteClick = (gameId) => setDeletingGameId(gameId);
  const confirmDeleteGame = () => {
    if (deletingGameId) {
      onDeleteGame(deletingGameId);
      setDeletingGameId(null);
    }
  };
  const handleDeleteTeamClick = (teamId) => setDeletingTeamId(teamId);
  const confirmDeleteTeam = () => {
    if (deletingTeamId) {
      onDeleteTeam(deletingTeamId);
      setDeletingTeamId(null);
    }
  };
  const toggleExpandGame = (gameId) => {
    setExpandedGameIds((prev) =>
      prev.includes(gameId)
        ? prev.filter((id) => id !== gameId)
        : [...prev, gameId]
    );
  };

  // Add new team
  const handleTeamSubmit = (e) => {
    e.preventDefault();
    if (newTeamName.trim()) {
      onAddTeam(newTeamName.trim());
      setNewTeamName("");
    }
  };

  return (
    <>
      {graphData && (
        <StatGraphModal graphData={graphData} onClose={() => setGraphData(null)} />
      )}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Career stats & teams */}
        <div className="lg:col-span-1 space-y-6">
          <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 className="text-xl font-bold mb-4 text-orange-500">Career Totals</h3>
            <div className="grid grid-cols-3 gap-3 text-center">
              {/* Games Played stat card (clickable!) */}
              <StatCard
                label="Games Played"
                value={aggregatedStats.gamesPlayed || 0}
              />
              <StatCard label="Points" value={aggregatedStats.points || 0} clickable onClick={() => handleStatClick("points", "Points")} />
              <StatCard label="Rebounds" value={aggregatedStats.rebounds || 0} clickable onClick={() => handleStatClick("rebounds", "Rebounds")} />
              <StatCard label="Assists" value={aggregatedStats.assists || 0} clickable onClick={() => handleStatClick("assists", "Assists")} />
              <StatCard label="Steals" value={aggregatedStats.steals || 0} clickable onClick={() => handleStatClick("steals", "Steals")} />
              <StatCard label="Blocks" value={aggregatedStats.blocks || 0} clickable onClick={() => handleStatClick("blocks", "Blocks")} />
              <StatCard label="Fouls" value={aggregatedStats.fouls || 0} clickable onClick={() => handleStatClick("fouls", "Fouls")} />
              <StatCard label="Turnovers" value={aggregatedStats.turnovers || 0} clickable onClick={() => handleStatClick("turnovers", "Turnovers")} />
              <StatCard label="A/T Ratio" value={formatRatio(aggregatedStats.assists, aggregatedStats.turnovers)}/>
            </div>
            <div className="border-t border-gray-200 dark:border-gray-700 my-4"></div>
            <h4 className="text-lg font-bold mb-3 text-orange-500">Shooting</h4>
            <div className="grid grid-cols-2 gap-3 text-center">
              <StatCard label="FG%" value={formatPercent(totalFgMade, totalFgAtt)}/>
              <StatCard label="FT%" value={formatPercent(aggregatedStats.ftm, aggregatedStats.fta)}/>
              <StatCard label="2-Point %" value={formatPercent(aggregatedStats.fg2m, aggregatedStats.fg2a)}/>
              <StatCard label="3-Point %" value={formatPercent(aggregatedStats.fg3m, aggregatedStats.fg3a)}/>
            </div>
          </div>
          <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 className="text-xl font-bold mb-3 text-orange-500">Teams</h3>
            <ul className="space-y-2 mb-4">
              {teams.map(team => (
                <li key={team.id} className="bg-gray-100 dark:bg-gray-700 p-2 rounded flex justify-between items-center">
                  <span>{team.name}</span>
                  <button onClick={() => handleDeleteTeamClick(team.id)} className="p-1 text-gray-400 hover:text-white hover:bg-red-500/20 rounded-full">
                    <TrashIcon />
                  </button>
                </li>
              ))}
            </ul>
            <form onSubmit={handleTeamSubmit} className="flex gap-2">
              <input type="text" value={newTeamName} onChange={(e) => setNewTeamName(e.target.value)} placeholder="Add new team" className="flex-grow bg-gray-50 dark:bg-gray-700 rounded p-2 focus:ring-orange-500 focus:ring-2 outline-none border border-gray-300 dark:border-gray-600" />
              <button type="submit" className="bg-green-500 hover:bg-green-600 p-2 rounded text-white"><PlusIcon /></button>
            </form>
          </div>
        </div>
        {/* Game History */}
        <div className="lg:col-span-2 bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div
            className="flex justify-between items-center mb-4 cursor-pointer"
            onClick={() => setIsHistoryVisible(!isHistoryVisible)}
          >
            <h2 className="text-2xl font-bold text-orange-500">Game History</h2>
            <ChevronRightIcon className={`${isHistoryVisible ? "rotate-90" : ""}`} />
          </div>
          {isHistoryVisible && (
            <>
              <div className="flex flex-col sm:flex-row gap-4 mb-4">
                <input type="text" placeholder="Search by opponent..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full sm:w-1/2 bg-gray-50 dark:bg-gray-700 rounded p-2 focus:ring-orange-500 focus:ring-2 outline-none border border-gray-300 dark:border-gray-600" />
                <input type="date" value={dateFilter} onChange={(e) => setDateFilter(e.target.value)} className="w-full sm:w-auto bg-gray-50 dark:bg-gray-700 rounded p-2 focus:ring-orange-500 focus:ring-2 outline-none border border-gray-300 dark:border-gray-600" />
              </div>
              <div className="space-y-2 max-h-[55vh] overflow-y-auto pr-2">
                {paginatedStats.length > 0 ? (
                  paginatedStats.map((game) => {
                    const expanded = expandedGameIds.includes(game.id);
                    return (
                      <div
                        key={game.id}
                        className="bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600"
                      >
                        {/* Header row with chevron in line with team/opponent */}
                        <div className="p-4 flex items-center justify-between cursor-pointer" onClick={() => toggleExpandGame(game.id)}>
                          <div className="flex items-center gap-2">
                            <ChevronRightIcon
                              className={`transition-transform duration-200 ${expanded ? "rotate-90" : ""}`}
                              style={{ minWidth: 20 }}
                            />
                            <div>
                              <p className="font-bold text-lg">
                                {new Date(game.timestamp).toLocaleString()}
                              </p>
                              <p className="text-sm text-gray-500 dark:text-gray-300">
                                {game.teamName} vs {game.opponent}
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center gap-2 flex-shrink-0">
                            <span
                              className={`px-2 py-1 text-xs font-bold rounded-full ${
                                game.outcome === "W"
                                  ? "bg-green-100 text-green-800"
                                  : game.outcome === "L"
                                  ? "bg-red-100 text-red-800"
                                  : "bg-gray-200 text-gray-800"
                              }`}
                            >
                              {game.outcome} {game.myTeamScore}-{game.opponentScore}
                            </span>
                            {/* Trash icon always shown in header */}
                            <button
                              className="p-1 text-red-300 hover:text-red-500 rounded transition"
                              onClick={e => {
                                e.stopPropagation();
                                handleDeleteClick(game.id);
                              }}
                              title="Delete Game"
                            >
                              <TrashIcon />
                            </button>
                          </div>
                        </div>
                        {/* Expanded view */}
                        {expanded && (
                          <div className="p-4 pt-2 relative">
                            {/* Stat grid using the same card style as Career Stats */}
                            <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-2">
                              <StatCard label="Points" value={game.points} />
                              <StatCard label="2-Point Made/Att" value={`${game.fg2m || 0}/${game.fg2a || 0}`} />
                              <StatCard label="3-Point Made/Att" value={`${game.fg3m || 0}/${game.fg3a || 0}`} />
                              <StatCard label="FT Made/Att" value={`${game.ftm || 0}/${game.fta || 0}`} />
                              <StatCard label="Rebounds" value={game.rebounds} />
                              <StatCard label="Assists" value={game.assists} />
                              <StatCard label="Steals" value={game.steals} />
                              <StatCard label="Blocks" value={game.blocks} />
                              <StatCard label="Fouls" value={game.fouls} />
                              <StatCard label="Turnovers" value={game.turnovers} />
                              <StatCard label="A/T Ratio" value={formatRatio(game.assists, game.turnovers)} />
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })
                ) : (
                  <div className="text-center py-10 text-gray-400">No games found.</div>
                )}
              </div>
              {/* Pagination */}
              {totalPages > 1 && (
                <div className="flex justify-center items-center mt-4 gap-3">
                  <button
                    className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded disabled:opacity-50"
                    onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                  >
                    Prev
                  </button>
                  <span className="text-gray-700 dark:text-gray-300">
                    Page {currentPage} of {totalPages}
                  </span>
                  <button
                    className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded disabled:opacity-50"
                    onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                  >
                    Next
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </div>
      {/* Delete confirmation modal */}
      {deletingGameId && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg max-w-sm mx-auto">
            <h3 className="text-lg font-bold mb-4 text-red-500">Delete Game?</h3>
            <p className="mb-6">Are you sure you want to delete this game? This cannot be undone.</p>
            <div className="flex gap-4 justify-end">
              <button
                className="px-4 py-2 rounded bg-gray-200 dark:bg-gray-700"
                onClick={() => setDeletingGameId(null)}
              >
                Cancel
              </button>
              <button
                className="px-4 py-2 rounded bg-red-500 text-white font-bold"
              onClick={() => {
  if (deletingGameId) {
    onDeleteGame(deletingGameId);
    setDeletingGameId(null);
  }
}}
               >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
      {/* Delete Team Modal */}
      {deletingTeamId && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg max-w-sm mx-auto">
            <h3 className="text-lg font-bold mb-4 text-red-500">Delete Team?</h3>
            <p className="mb-6">Are you sure you want to delete this team?</p>
            <div className="flex gap-4 justify-end">
              <button
                className="px-4 py-2 rounded bg-gray-200 dark:bg-gray-700"
                onClick={() => setDeletingTeamId(null)}
              >
                Cancel
              </button>
              <button
                className="px-4 py-2 rounded bg-red-500 text-white font-bold"
                onClick={confirmDeleteTeam}
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

