import React, { useState } from "react";
import { EditIcon, TrashIcon } from "../icons";

function GameHistory({ stats, onUpdateGame, onDeleteGame }) {
  const [editingId, setEditingId] = useState(null);
  const [editData, setEditData] = useState({});

  // Helper to start editing
  const startEdit = (game) => {
    setEditingId(game.id);
    setEditData({
      ...game,
    });
  };

  // Helper to save edit
  const saveEdit = (gameId) => {
    onUpdateGame(gameId, editData);
    setEditingId(null);
    setEditData({});
  };

  return (
    <div className="space-y-2 max-h-[55vh] overflow-y-auto pr-2">
      {stats.length === 0 && (
        <p className="text-gray-500 dark:text-gray-400 p-4">No games found.</p>
      )}
      {stats.map((game) => {
        const expanded = editingId === game.id;
        return (
          <div
            key={game.id}
            className="bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600"
          >
            {/* Collapsed View */}
            <div className="p-4 flex justify-between items-center">
              <div>
                <p className="font-bold text-lg">
                  {new Date(game.timestamp).toLocaleString()}
                </p>
                <p className="text-sm text-gray-500 dark:text-gray-300">
                  {game.teamName} vs {game.opponent}
                </p>
              </div>
              <div className="flex items-center gap-2 flex-shrink-0">
                <span
                  className={`px-2 py-1 text-xs font-bold rounded-full ${
                    game.outcome === "W"
                      ? "bg-green-100 text-green-800"
                      : game.outcome === "L"
                      ? "bg-red-100 text-red-800"
                      : "bg-gray-200 text-gray-800"
                  }`}
                >
                  {game.outcome} {game.myTeamScore}-{game.opponentScore}
                </span>
                {/* Show Trash in both collapsed and expanded */}
                <button
                  onClick={() => onDeleteGame(game.id)}
                  className="p-1 text-gray-400 hover:text-red-400 hover:bg-red-100 dark:hover:bg-red-800/50 rounded-full"
                  title="Delete"
                >
                  <TrashIcon />
                </button>
                {/* Show Edit only if not expanded */}
                {!expanded && (
                  <button
                    onClick={() => startEdit(game)}
                    className="p-1 text-gray-400 hover:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full"
                    title="Edit"
                  >
                    <EditIcon />
                  </button>
                )}
              </div>
            </div>
            {/* Expanded (Edit) View */}
            {expanded && (
              <form
                className="p-4 border-t border-gray-200 dark:border-gray-600 grid grid-cols-2 gap-4"
                onSubmit={(e) => {
                  e.preventDefault();
                  saveEdit(game.id);
                }}
              >
                {/* Team & Opponent Scores */}
                <div className="flex flex-col">
                  <label className="text-orange-500 font-bold mb-1">
                    {game.teamName} Score
                  </label>
                  <input
                    type="number"
                    className="bg-white dark:bg-gray-900 rounded p-2 border border-gray-300 dark:border-gray-600"
                    value={editData.myTeamScore ?? ""}
                    onChange={(e) =>
                      setEditData((prev) => ({
                        ...prev,
                        myTeamScore:
                          e.target.value === "" ? "" : Number(e.target.value),
                      }))
                    }
                    placeholder="0"
                  />
                </div>
                <div className="flex flex-col">
                  <label className="text-orange-500 font-bold mb-1">
                    {game.opponent} Score
                  </label>
                  <input
                    type="number"
                    className="bg-white dark:bg-gray-900 rounded p-2 border border-gray-300 dark:border-gray-600"
                    value={editData.opponentScore ?? ""}
                    onChange={(e) =>
                      setEditData((prev) => ({
                        ...prev,
                        opponentScore:
                          e.target.value === "" ? "" : Number(e.target.value),
                      }))
                    }
                    placeholder="0"
                  />
                </div>
                {/* 2PT, 3PT, FT - Each has made/att below label */}
                <div className="col-span-2 grid grid-cols-3 gap-2">
                  {[
                    {
                      keyM: "fg2m",
                      keyA: "fg2a",
                      label: "2PT",
                    },
                    {
                      keyM: "fg3m",
                      keyA: "fg3a",
                      label: "3PT",
                    },
                    {
                      keyM: "ftm",
                      keyA: "fta",
                      label: "FT",
                    },
                  ].map((stat) => (
                    <div key={stat.label} className="flex flex-col items-center">
                      <label className="font-bold text-orange-500 mb-0">
                        {stat.label}
                      </label>
                      <div className="flex gap-2 text-xs font-semibold text-gray-500 mb-1">
                        <span>Made</span>
                        <span>Att</span>
                      </div>
                      <div className="flex gap-2">
                        <input
                          type="number"
                          className="w-14 bg-white dark:bg-gray-900 rounded p-1 border border-gray-300 dark:border-gray-600 text-center"
                          value={editData[stat.keyM] ?? ""}
                          onChange={(e) =>
                            setEditData((prev) => ({
                              ...prev,
                              [stat.keyM]:
                                e.target.value === "" ? "" : Number(e.target.value),
                            }))
                          }
                          placeholder="0"
                        />
                        <input
                          type="number"
                          className="w-14 bg-white dark:bg-gray-900 rounded p-1 border border-gray-300 dark:border-gray-600 text-center"
                          value={editData[stat.keyA] ?? ""}
                          onChange={(e) =>
                            setEditData((prev) => ({
                              ...prev,
                              [stat.keyA]:
                                e.target.value === "" ? "" : Number(e.target.value),
                            }))
                          }
                          placeholder="0"
                        />
                      </div>
                    </div>
                  ))}
                </div>
                {/* Other stats */}
                {[
                  { key: "rebounds", label: "Rebounds" },
                  { key: "assists", label: "Assists" },
                  { key: "steals", label: "Steals" },
                  { key: "blocks", label: "Blocks" },
                  { key: "fouls", label: "Fouls" },
                  { key: "turnovers", label: "Turnovers" },
                ].map((stat) => (
                  <div key={stat.key} className="flex flex-col">
                    <label className="font-bold text-orange-500 mb-1">
                      {stat.label}
                    </label>
                    <input
                      type="number"
                      className="bg-white dark:bg-gray-900 rounded p-2 border border-gray-300 dark:border-gray-600"
                      value={editData[stat.key] ?? ""}
                      onChange={(e) =>
                        setEditData((prev) => ({
                          ...prev,
                          [stat.key]:
                            e.target.value === "" ? "" : Number(e.target.value),
                        }))
                      }
                      placeholder="0"
                    />
                  </div>
                ))}
                <div className="col-span-2 flex justify-end gap-4 mt-2">
                  <button
                    type="button"
                    className="bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded px-4 py-2"
                    onClick={() => setEditingId(null)}
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="bg-green-500 hover:bg-green-600 text-white font-bold px-4 py-2 rounded"
                  >
                    Save
                  </button>
                </div>
              </form>
            )}
          </div>
        );
      })}
    </div>
  );
}

export default GameHistory;

