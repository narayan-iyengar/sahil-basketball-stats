import React, { useState } from "react";
import { TrashIcon } from "../icons";

// Simple icons for result
const WinIcon = () => (
  <span className="inline-block w-7 h-7 rounded-full bg-green-100 text-green-600 font-bold flex items-center justify-center mr-2">
    W
  </span>
);
const LossIcon = () => (
  <span className="inline-block w-7 h-7 rounded-full bg-red-100 text-red-600 font-bold flex items-center justify-center mr-2">
    L
  </span>
);
const TieIcon = () => (
  <span className="inline-block w-7 h-7 rounded-full bg-gray-200 text-gray-600 font-bold flex items-center justify-center mr-2">
    T
  </span>
);

function getResult(game) {
  if (!game) return { label: "", icon: null, score: "" };
  const { homeScore, awayScore } = game;
  if (typeof homeScore !== "number" || typeof awayScore !== "number") return { label: "", icon: null, score: "" };
  if (homeScore > awayScore)
    return { label: "Win", icon: <WinIcon />, score: `${homeScore}-${awayScore}` };
  if (homeScore < awayScore)
    return { label: "Loss", icon: <LossIcon />, score: `${homeScore}-${awayScore}` };
  return { label: "Tie", icon: <TieIcon />, score: `${homeScore}-${awayScore}` };
}

const statOrder = [
  { key: "points", label: "Points" },
  { key: "fg2", label: "2-Point Made/Att" },
  { key: "fg3", label: "3-Point Made/Att" },
  { key: "ft", label: "FT Made/Att" },
  { key: "rebounds", label: "Rebounds" },
  { key: "assists", label: "Assists" },
  { key: "steals", label: "Steals" },
  { key: "blocks", label: "Blocks" },
  { key: "fouls", label: "Fouls" },
  { key: "turnovers", label: "Turnovers" },
  { key: "atr", label: "A/T Ratio" },
];

export default function GameHistory({ games = [], onDeleteGame }) {
  const [expanded, setExpanded] = useState(null);

  return (
    <div>
      {games.length === 0 && (
        <div className="text-center text-gray-500 my-8">No games yet!</div>
      )}
      {games.map((game, idx) => {
        const { label, icon, score } = getResult(game);
        const isExpanded = expanded === game.id;

        // Assume stats are stored on game.stats, fallback to 0 for missing
        const stats = {
          points: game.points ?? 0,
          fg2: `${game.fg2m ?? 0}/${game.fg2a ?? 0}`,
          fg3: `${game.fg3m ?? 0}/${game.fg3a ?? 0}`,
          ft: `${game.ftm ?? 0}/${game.fta ?? 0}`,
          rebounds: game.rebounds ?? 0,
          assists: game.assists ?? 0,
          steals: game.steals ?? 0,
          blocks: game.blocks ?? 0,
          fouls: game.fouls ?? 0,
          turnovers: game.turnovers ?? 0,
          atr: game.atr ?? "0.0",
        };

        return (
          <div
            key={game.id || idx}
            className="bg-white dark:bg-gray-800 rounded-xl shadow p-4 my-4"
          >
            {/* Header Row */}
            <div className="flex items-center justify-between mb-3">
              <div
                className="flex items-center cursor-pointer"
                onClick={() => setExpanded(isExpanded ? null : game.id)}
              >
                <span className="mr-2">
                  {isExpanded ? (
                    <span>&#x25BC;</span>
                  ) : (
                    <span>&#x25B6;</span>
                  )}
                </span>
                <span className="font-bold text-2xl text-black dark:text-white">
                  {game.date
                    ? new Date(game.date).toLocaleString()
                    : "Game Date"}
                </span>
              </div>
              <div className="flex items-center">
                {/* Result Icon */}
                {icon && (
                  <div className="flex items-center mr-2">
                    {icon}
                    <span
                      className={`font-semibold ${
                        label === "Win"
                          ? "text-green-600"
                          : label === "Loss"
                          ? "text-red-500"
                          : "text-gray-600"
                      }`}
                    >
                      {score}
                    </span>
                  </div>
                )}
                <button
                  onClick={() => onDeleteGame && onDeleteGame(game.id)}
                  className="ml-1 text-red-400 hover:text-red-600"
                  title="Delete Game"
                >
                  <TrashIcon />
                </button>
              </div>
            </div>
            {/* Teams Row */}
            <div className="mb-2 text-lg text-gray-600 font-semibold">
              {game.teamName || "Team"} vs {game.opponent || "Opponent"}
            </div>
            {/* Expanded: show stats */}
            {isExpanded && (
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mt-4">
                {statOrder.map((s) => (
                  <div
                    key={s.key}
                    className="bg-gray-100 dark:bg-gray-900 rounded-lg px-4 py-5 flex flex-col items-center"
                  >
                    <div className="text-orange-500 font-semibold text-base mb-1">
                      {s.label}
                    </div>
                    <div className="text-2xl font-bold text-black dark:text-white">
                      {stats[s.key]}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}

