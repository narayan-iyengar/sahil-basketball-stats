import React, { useEffect, useState, useCallback } from "react";
import { auth, db, rtdb, provider } from "./firebase";
import {
  collection, doc, getDocs, getDoc, setDoc, addDoc, updateDoc, deleteDoc, onSnapshot, query, orderBy,
} from "firebase/firestore";
import { signInWithPopup, signOut, onAuthStateChanged } from "firebase/auth";
import GameSetup from "./GameSetup";
import Dashboard from "./Dashboard";
import Header from "./Header";
import AuthScreen from "./AuthScreen";
import LiveGameAdmin from "./LiveGameAdmin";
import LiveGameViewer from "./LiveGameViewer";
import { listenPresence, setPresence, removePresence } from "./presence";

export default function App() {
  // Auth & User
  const [user, setUser] = useState(null);
  const [theme, setTheme] = useState("light");
  const [loading, setLoading] = useState(true);
  // App State
  const [page, setPage] = useState("game_setup");
  const [teams, setTeams] = useState([]);
  const [games, setGames] = useState([]);
  const [stats, setStats] = useState([]);
  const [liveGameId, setLiveGameId] = useState(null);
  // Presence State
  const [admins, setAdmins] = useState([]);
  const [viewers, setViewers] = useState([]);

  // --- AUTH LOGIC ---
  useEffect(() => {
    const unsub = onAuthStateChanged(auth, (u) => {
      setUser(u);
      setLoading(false);
      // Remove presence on logout
      if (!u) {
        removePresence(user, "viewer", liveGameId); // or "admin" as needed
        removePresence(user, "admin", liveGameId); // or "admin" as needed
      }
    });
    return unsub;
    // eslint-disable-next-line
  }, []);

  // --- THEME LOGIC ---
  useEffect(() => {
    document.documentElement.classList.toggle("dark", theme === "dark");
  }, [theme]);
  const toggleTheme = useCallback(() => setTheme((t) => (t === "dark" ? "light" : "dark")), []);

  // --- DATA LOADERS ---
  // TEAMS
  useEffect(() => {
    if (!user) return;
    const teamsCol = collection(db, "teams");
    const unsub = onSnapshot(teamsCol, (snap) => {
      setTeams(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return unsub;
  }, [user]);
  // GAMES
  useEffect(() => {
    if (!user) return;
    const gamesCol = collection(db, "games");
    const unsub = onSnapshot(gamesCol, (snap) => {
      setGames(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return unsub;
  }, [user]);
  // STATS
  useEffect(() => {
    if (!user) return;
    const statsCol = collection(db, "stats");
    const unsub = onSnapshot(statsCol, (snap) => {
      setStats(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return unsub;
  }, [user]);

  // --- PRESENCE LOGIC ---
  
  // Listen for admin presence
  useEffect(() => {
    if (!user) return;
    // Set yourself as present
    setPresence(user, "admin");
    // Listen for all admins
    const unsub = listenPresence("admin", null, (arr) => setAdmins(arr || []));
    return () => {
      removePresence(user, "admin");
      if (unsub && typeof unsub === "function") unsub();
    };
  }, [user]);

  // Listen for viewers (global, or you can do per-game if desired)
  useEffect(() => {
    const unsub = listenPresence("viewer", null, (arr) => setViewers(arr || []));
    return () => {
      if (unsub && typeof unsub === "function") unsub();
    };
  }, []);


  // --- CRUD CALLBACKS ---
  // TEAM
 const handleDeleteTeam = useCallback(async (teamId) => {
  await deleteDoc(doc(db, "teams", teamId));
  setTeams((teams) => teams.filter((t) => t.id !== teamId));
}, []);


const handleAddTeam = async (teamName) => {
  const docRef = await addDoc(collection(db, "teams"), { name: teamName });
setTeams((t) => {
  if (t.some(team => team.name === teamName)) return t; // do not add
  return [...t, { name: teamName, id: docRef.id }];
});  
  return { name: teamName, id: docRef.id };
};

  // GAME
  const handleAddGame = useCallback(async (game) => {
    const docRef = await addDoc(collection(db, "games"), game);
    setGames((g) => [...g, { ...game, id: docRef.id }]);
  }, []);
  // STAT
  const handleAddStat = useCallback(async (stat) => {
    const docRef = await addDoc(collection(db, "stats"), stat);
    setStats((s) => [...s, { ...stat, id: docRef.id }]);
  }, []);
  // DELETE GAME
  const handleDeleteGame = useCallback(async (gameId) => {
    await deleteDoc(doc(db, "games", gameId));
    setGames((g) => g.filter((x) => x.id !== gameId));
    // Also remove stats for that game
    setStats((s) => s.filter((x) => x.gameId !== gameId));
  }, []);

const handleEndGame = async (liveGameId) => {
  try {
    const liveGameRef = doc(db, "liveGames", liveGameId);
    const liveGameSnap = await getDoc(liveGameRef);
    if (!liveGameSnap.exists()) return;

    const gameData = liveGameSnap.data();

    // Calculate result (Win/Loss/Tie)
    let result = "Tie";
    if (gameData.homeScore > gameData.awayScore) result = "Win";
    else if (gameData.homeScore < gameData.awayScore) result = "Loss";

    // Prepare final record
    const finalGame = {
      ...gameData,
      result,
      endedAt: new Date().toISOString(),
      status: "final"
    };

    // Save to 'games' collection
    await addDoc(collection(db, "games"), finalGame);

    // Only after saving, delete live game
    await deleteDoc(liveGameRef);

    setLiveGameId(null);
    setPage("game_setup");
    alert("Game ended and saved!");
  } catch (err) {
    alert("Failed to save game: " + err.message);
  }
};




  // --- NAV HELPERS ---
  const handleSignIn = async () => {
    await signInWithPopup(auth, provider);
  };
  const handleSignOut = async () => {
    removePresence(user, "viewer", liveGameId);
    removePresence(user, "admin", liveGameId); // or "admin" as needed
    await signOut(auth);
    setPage("game_setup");
  };

const handleSubmitGame = async (config, mode) => {
  // Build a new game object
  const newGame = {
    ...config,
    createdBy: user?.uid || null,
    createdAt: new Date().toISOString(),
    status: mode === "live" ? "live" : "final",
    playerStats: {
      fg2m: 0, fg2a: 0,
      fg3m: 0, fg3a: 0,
      ftm: 0, fta: 0,
      rebounds: 0, assists: 0, steals: 0,
      blocks: 0, fouls: 0, turnovers: 0,
    },
    homeScore: 0,
    awayScore: 0,
    //isRunning: mode === "live" ? true : false,
    clock: config.periodLength || 600, // default 10 minutes
    period: 1,
  };

  if (mode === "live") {
    // Write to liveGames collection for live admin
    const docRef = await addDoc(collection(db, "liveGames"), newGame);
    setLiveGameId(docRef.id);
    setPage("live_admin");
  } else {
    // Write to games collection for final stats
    const docRef = await addDoc(collection(db, "games"), newGame);
    setGames((g) => [...g, { ...newGame, id: docRef.id }]);
    setPage("dashboard");
  }
};




  // --- PAGE RENDER LOGIC ---
  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
        <span className="text-orange-500 font-bold text-3xl animate-spin-slow">üèÄ</span>
        <span className="ml-4">Loading App...</span>
      </div>
    );
  }
  if (!user) {
    return <AuthScreen onSignIn={handleSignIn} />;
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-100 dark:bg-gray-900">
      <Header
        user={user}
        onSignOut={handleSignOut}
        setPage={setPage}
        theme={theme}
        toggleTheme={toggleTheme}
        admins={admins}
        viewers={viewers}
        page={page}
      />
      <main className="flex-1">
        {page === "game_setup" && (
          <GameSetup
            user={user}
            teams={teams}
            stats={stats}
            onAddTeam={handleAddTeam}
            setPage={setPage}
            games={games}
            onAddGame={handleAddGame}
            setLiveGameId={setLiveGameId}
            onSubmit={handleSubmitGame}
          />
        )}
        {page === "dashboard" && (
          <Dashboard
            user={user}
            teams={teams}
            games={games}
            stats={stats}
            onDeleteGame={handleDeleteGame}
            onDeleteTeam={handleDeleteTeam}
            onAddTeam={handleAddTeam}
          />
        )}
        {page === "live_admin" && liveGameId && (
          <LiveGameAdmin
            user={user}
            db={db}
            gameId={liveGameId}
            setPage={setPage}
            teams={teams}
            stats={stats}
            games={games}
            onEndGame={handleEndGame}
          />
        )}
        {page === "live_viewer" && liveGameId && (
          <LiveGameViewer
            user={user}
            gameId={liveGameId}
            setPage={setPage}
            teams={teams}
            stats={stats}
            games={games}
          />
        )}
      </main>
    </div>
  );
}

